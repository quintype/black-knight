#!/bin/bash -e


usage()
{
echo -e "Usage: $0 [status|logs|gp] args
         $0 status app_name  publisher
         $0 logs pod_name log_file number_of_lines publisher multi_container_pod
         $0 gp app_name publisher
         eg:-
         $0 status thequint  publisher
         $0 logs pod_name log_file number_of_lines publisher true
         $0 gp thequint theuqint"
         exit
}

get_rc_info()
{
  $kubectl get rc $1 --namespace=$2
}

get_rc_status()
{
desired=$(get_rc_info $1 $2)
if [ "$desired" -eq "1" ];then
    echo 'down'
else
    echo 'up'
fi
}

get_svc_info()
{
$kubectl get svc $1 --namespace=$2
}

get_ing_info()
{
$kubectl get ing --namespace=$2 -o wide
}

get_pods_info()
{
  $kubectl get pod --namespace=$2 --selector=app=$1 -o wide
}


#Function to parse container name from pod name
get_app_name()
{
    name=$1
    first="$(echo "$name" | cut -d'-' -f1)"
    second="$(echo "$name" | cut -d'-' -f2)"
    third="$(echo "$name" | cut -d'-' -f3)"
    app_name="$first-$second-$third"
    echo $app_name
}

get_logs()
{
  KUBE_OPTS=""
  if [ "$MULTIPLE_CONTAINER_PODS" == "true" ]; then
    KUBE_OPTS="$KUBE_OPTS --container=$(get_app_name "$1")"
  fi

  log_file_name=$2
  if [ "$log_file_name" == "stdout" ]; then
    $kubectl logs $1 --tail $3 --namespace=$4 $KUBE_OPTS
  else
    $kubectl exec  $1 --namespace=$4 $KUBE_OPTS -- tail -n $3 $log_file_name
  fi
}

get_pods()
{
  $kubectl get pod --namespace=$2 --selector=app=$1 | grep $1 | awk '{print $1}'
}

get_kube_status()
{
  rcs=$(get_rc_info $1 $2)
  echo -e "Replication Contoller\n\n${rcs}\t"

  echo -e "Pods\n\n"
  pods=$(get_pods_info $1 $2)
  echo -e "${pods}\t"

  svc=$(get_svc_info $1 $2)
  echo -e "Service\n\n${svc}\t"

  echo -e "Ingress Controller\n\n"
  ing=$(get_ing_info $1 $2)
  echo -e "${ing}"
}

if [ "$#" -gt 1 ];then
  if [ -z "$KUBE_MASTER" ]; then
    echo Please provide a deploy server
    exit 1
  fi
  server=$KUBE_MASTER
  opt=$1
  kubectl="kubectl --server=$server"
  shift 1
else
  usage
fi

case $opt in
   status)
       if [ $# -ne 2 ]; then
           usage
           exit 1
        fi
        status=$(get_rc_status $1 $2)
        echo "$status"
   ;;
   logs) 
      if [ $# -ne 4 ]; then
         usage
         exit 1
      fi
      get_logs $1 $2 $3 $4
   ;;
   gp)
      if [ $# -ne 2 ]; then
         usage
         exit 1
      fi
      get_pods $1 $2
   ;;
   kube_status)
        if [ $# -ne 2 ]; then
           usage
           exit 1
        fi
        get_kube_status $1 $2
   ;;
   *) usage
   ;;
esac
